{"version":3,"sources":["CaesarsCypher.jsx","helpers/encryptMessage.js","index.js"],"names":["CaesarsCypher","useState","cypherKey","setcypherKey","input","setinput","encryptedMessage","key","text","alphabet","split","encryptedAlphabet","map","_","index","length","char","str","match","indexOf","join","encryptMessage","className","value","onChange","e","target","toLowerCase","onClick","cypher","Math","abs","ReactDOM","render","document","getElementById"],"mappings":"4LAEaA,EAAgB,WAC3B,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,ECLsB,SAACC,EAAKC,GAClC,IAAIC,EAAW,6BAA6BC,MAAM,IAC9CC,EAAoBF,EAASG,KAC/B,SAACC,EAAGC,GAAJ,OAAcL,GAAUK,EAAQP,GAAOE,EAASM,WAGlD,OAAOP,EACJE,MAAM,IACNE,KAAI,SAAAI,GACH,GAJmC,KAAtBC,EAICD,GAJUD,SAAgBE,EAAIC,MAAM,UAKhD,OAAOF,EALI,IAAAC,EAOPH,EAAQL,EAASU,QAAQH,GAC/B,OAAOL,EAAkBG,MAE1BM,KAAK,IDViBC,CAAenB,EAAWE,GAuBnD,OACE,sBAAKkB,UAAU,YAAf,UACE,iDACA,sBAAKA,UAAU,mBAAf,UACE,0BAAUC,MAAOnB,EAAOoB,SAzBJ,SAAAC,GACxBpB,EAASoB,EAAEC,OAAOH,MAAMI,kBAyBpB,wBAAQC,QAjBc,WACtB1B,EAAY,IACdC,EAAaD,EAAY,IAevB,eACA,8CAAiBA,KACjB,wBAAQ0B,QAbc,WACtB1B,EAAY,GACdC,EAAaD,EAAY,IAWvB,eACA,0BAAUqB,MAAOjB,OAEnB,wBAAQsB,QA3BQ,WAClBvB,EAASC,GACTH,GAAa,SAAA0B,GAAM,OAAIC,KAAKC,IAAIF,EAAS,QAyBvC,sB,MEjCNG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.724d7313.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { encryptMessage } from './helpers/encryptMessage';\nexport const CaesarsCypher = () => {\n  const [cypherKey, setcypherKey] = useState(1);\n  const [input, setinput] = useState('');\n  const encryptedMessage = encryptMessage(cypherKey, input);\n\n  const handleInputChange = e => {\n    setinput(e.target.value.toLowerCase());\n  };\n\n  const swapHandler = () => {\n    setinput(encryptedMessage);\n    setcypherKey(cypher => Math.abs(cypher - 26));\n  };\n\n  const incrementKeyHandler = () => {\n    if (cypherKey < 26) {\n      setcypherKey(cypherKey + 1);\n    }\n  };\n\n  const decrementKeyHandler = () => {\n    if (cypherKey > 0) {\n      setcypherKey(cypherKey - 1);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Caesar's Cypher</h1>\n      <div className=\"cypher-container\">\n        <textarea value={input} onChange={handleInputChange} />\n        <button onClick={incrementKeyHandler}>+</button>\n        <h3>Cypher Key: {cypherKey}</h3>\n        <button onClick={decrementKeyHandler}>-</button>\n        <textarea value={encryptedMessage}></textarea>\n      </div>\n      <button onClick={swapHandler}>Swap</button>\n    </div>\n  );\n};\n","export const encryptMessage = (key, text) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  let encryptedAlphabet = alphabet.map(\n    (_, index) => alphabet[(index + key) % alphabet.length]\n  );\n  const isLetter = str => str.length === 1 && str.match(/[a-z]/i);\n  return text\n    .split('')\n    .map(char => {\n      if (!isLetter(char)) {\n        return char;\n      }\n      const index = alphabet.indexOf(char);\n      return encryptedAlphabet[index];\n    })\n    .join('');\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CaesarsCypher } from './CaesarsCypher';\nimport './index.css';\n\nReactDOM.render(\n  <CaesarsCypher />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}