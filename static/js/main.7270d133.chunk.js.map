{"version":3,"sources":["CaesarsCypher.jsx","helpers/encryptMessage.js","index.js"],"names":["CaesarsCypher","useState","cypherKey","setcypherKey","input","setinput","encryptedMessage","key","text","alphabet","split","encryptedAlphabet","map","_","index","length","char","str","match","indexOf","join","encryptMessage","className","value","onChange","e","target","toLowerCase","onClick","cypher","Math","abs","ReactDOM","render","document","getElementById"],"mappings":"4LAEaA,EAAgB,WAC3B,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,ECLsB,SAACC,EAAKC,GAClC,IAAIC,EAAW,6BAA6BC,MAAM,IAC9CC,EAAoBF,EAASG,KAC/B,SAACC,EAAGC,GAAJ,OAAcL,GAAUK,EAAQP,GAAOE,EAASM,WAGlD,OAAOP,EACJE,MAAM,IACNE,KAAI,SAAAI,GACH,GAJmC,KAAtBC,EAICD,GAJUD,SAAgBE,EAAIC,MAAM,UAKhD,OAAOF,EALI,IAAAC,EAOPH,EAAQL,EAASU,QAAQH,GAC/B,OAAOL,EAAkBG,MAE1BM,KAAK,IDViBC,CAAenB,EAAWE,GAuBnD,OACE,sBAAKkB,UAAU,YAAf,UACE,iDACA,sBAAKA,UAAU,mBAAf,UACE,0BAAUC,MAAOnB,EAAOoB,SAzBJ,SAAAC,GACxBpB,EAASoB,EAAEC,OAAOH,MAAMI,kBAyBpB,wBAAQC,QAjBc,WACtB1B,EAAY,IACdC,EAAaD,EAAY,IAevB,eACA,8CAAiBA,KACjB,wBAAQ0B,QAbc,WACtB1B,EAAY,GACdC,EAAaD,EAAY,IAWvB,eACA,0BAAUqB,MAAOjB,OAEnB,wBAAQsB,QA3BQ,WAClBvB,EAASC,GACTH,GAAa,SAAA0B,GAAM,OAAIC,KAAKC,IAAIF,EAAS,QAyBvC,sB,MEjCNG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7270d133.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { encryptMessage } from './helpers/encryptMessage';\r\nexport const CaesarsCypher = () => {\r\n  const [cypherKey, setcypherKey] = useState(1);\r\n  const [input, setinput] = useState('');\r\n  const encryptedMessage = encryptMessage(cypherKey, input);\r\n\r\n  const handleInputChange = e => {\r\n    setinput(e.target.value.toLowerCase());\r\n  };\r\n\r\n  const swapHandler = () => {\r\n    setinput(encryptedMessage);\r\n    setcypherKey(cypher => Math.abs(cypher - 26));\r\n  };\r\n\r\n  const incrementKeyHandler = () => {\r\n    if (cypherKey < 26) {\r\n      setcypherKey(cypherKey + 1);\r\n    }\r\n  };\r\n\r\n  const decrementKeyHandler = () => {\r\n    if (cypherKey > 0) {\r\n      setcypherKey(cypherKey - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Caesar's Cypher</h1>\r\n      <div className=\"cypher-container\">\r\n        <textarea value={input} onChange={handleInputChange} />\r\n        <button onClick={incrementKeyHandler}>+</button>\r\n        <h3>Cypher Key: {cypherKey}</h3>\r\n        <button onClick={decrementKeyHandler}>-</button>\r\n        <textarea value={encryptedMessage}></textarea>\r\n      </div>\r\n      <button onClick={swapHandler}>Swap</button>\r\n    </div>\r\n  );\r\n};\r\n","export const encryptMessage = (key, text) => {\r\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\r\n  let encryptedAlphabet = alphabet.map(\r\n    (_, index) => alphabet[(index + key) % alphabet.length]\r\n  );\r\n  const isLetter = str => str.length === 1 && str.match(/[a-z]/i);\r\n  return text\r\n    .split('')\r\n    .map(char => {\r\n      if (!isLetter(char)) {\r\n        return char;\r\n      }\r\n      const index = alphabet.indexOf(char);\r\n      return encryptedAlphabet[index];\r\n    })\r\n    .join('');\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CaesarsCypher } from './CaesarsCypher';\nimport './index.css';\n\nReactDOM.render(\n  <CaesarsCypher />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}